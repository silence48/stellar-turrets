{
    "function": "\"use strict\";var e=require(\"bignumber.js\"),t=require(\"lodash\"),a=require(\"stellar-sdk\");function s(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}var n=s(e);const r=\"PUBLIC\"===STELLAR_NETWORK?\"GDUVG64U5BIXL5BCVR4D7APOLOPQPJVBWIYMEWGXL4GQI2DK6XHMDARK\":\"GDRFLZ3SYZ3XO44KGBJAXW55F2DDDNXNSGLD6ZATK2S6VI2MA7QGXKCZ\",o=\"PUBLIC\"===STELLAR_NETWORK?\"GAJ4XJ3KQC4GVQHY24T6AZQOP7LWMLQ72BLR6NGPKVEUI2ITSFITHIEF\":\"GDY7G3LMEZ7M7OIMKZG5GERVAIGFYHDQMLTSWUZM3Q6YD5E2VEMKZZLR\",i=new a.Asset(\"SmartNFT02\",r),c=new a.Asset(\"SmartThief\",o),u=\"PUBLIC\"===STELLAR_NETWORK?new a.Asset(\"USDC\",\"GA5ZSEJYB37JRC5AVCIA5MOP4RHTM335X2KGX3IHOJAPP5RE34K4KZVN\"):new a.Asset(\"USDC\",\"GBL74ETHLQJQUQW7YQT4KO3HJVR74TIHSBW6ENRBSFHUTATBRKKLGW4Y\"),l=a.Asset.native(),d=new a.Server(HORIZON_URL);module.exports=async e=>{const{toAccount:s,fromAccount:m}=e;if(s===r||m===r||s===o||m===o)throw\"Invalid toAccount or fromAccount\";const p=await d.loadAccount(m).then((({balances:e})=>{try{const{balance:t}=e.find((({balance:e,asset_code:t,asset_issuer:a})=>new n.default(e).isGreaterThan(0)&&t===i.code&&a===i.issuer));if(t)return t;throw null}catch(e){throw`${m} does not hold the SmartNFT02`}}));if(Date.now()>=(\"PUBLIC\"===STELLAR_NETWORK?16403904e5:16399584e5)){let e;const s=Date.now(),o=[];await new Promise(((t,n)=>{const r=d.trades().forAssetPair(i,a.Asset.native()).limit(200).order(\"asc\").stream({onmessage(a){o.push(a),clearTimeout(e),Date.now()-s>=6e3?(r(),t()):e=setTimeout((()=>{r(),t()}),1e3)},onerror(e){r(),n(e)}});e=setTimeout((()=>{r(),t()}),1e3)}));const c=t.groupBy(o,\"counter_account\"),u=[];for(const e in c){const a=c[e];u.push({id:e,count:a.length,timestamp:new Date(t.orderBy(a,(({ledger_close_time:e})=>new Date(e).getTime()),\"asc\")?.[0]?.ledger_close_time).getTime()})}const{id:l}=t.orderBy(u,[\"count\",\"timestamp\",\"id\"],[\"desc\",\"asc\",\"desc\"])[0],T=await d.loadAccount(l).then((({balances:e})=>!!e.find((({asset_code:e,asset_issuer:t})=>\"SmartNFT02\"===e&&t===r)))).catch((()=>!1));return d.loadAccount(r).then((e=>{const t=[],s=e.signers.filter((({key:e})=>e!==r));t.push(...[a.Operation.clawback({asset:i,amount:p,from:m}),a.Operation.setOptions({setFlags:4,clearFlags:11}),s.filter((({type:e})=>\"ed25519_public_key\"===e)).map((({key:e})=>a.Operation.setOptions({signer:{ed25519PublicKey:e,weight:0}}))),T?[a.Operation.setTrustLineFlags({asset:i,trustor:l,flags:{authorized:!0,clawbackEnabled:!1}}),a.Operation.payment({asset:i,amount:\"0.0000001\",destination:l})]:a.Operation.createClaimableBalance({asset:i,amount:\"0.0000001\",claimants:[new a.Claimant(l,a.Claimant.predicateUnconditional()),new a.Claimant(r,a.Claimant.predicateNot(a.Claimant.predicateBeforeRelativeTime(new n.default(60).times(60).times(24).times(28).toFixed(0))))]})].flat());let o=new a.TransactionBuilder(e,{fee:new n.default(1).div(\"0.0000001\").div(t.length).toFixed(0,3),networkPassphrase:a.Networks[STELLAR_NETWORK]}).setTimeout(0);return t.forEach((e=>o.addOperation(e))),o=o.build(),o.toXDR()}))}const{source_amount:T,path:h}=await d.strictReceivePaths([l],u,\"5\").call().then((({records:e})=>{try{const{path:t,...s}=e[0];return{...s,path:t.map((({asset_type:e,asset_code:t,asset_issuer:s})=>\"native\"===e?l:new a.Asset(t,s)))}}catch(e){throw\"No viable strict receive paths found\"}}));return d.loadAccount(s).then((e=>{const t=[];t.push(a.Operation.clawback({asset:i,amount:p,from:m,source:r}),a.Operation.pathPaymentStrictReceive({sendAsset:l,sendMax:String(parseInt(5*Math.ceil((parseFloat(T)+5)/5))),destination:r,destAsset:u,destAmount:\"5\",path:h}),a.Operation.payment({asset:l,amount:\"5\",destination:m}),a.Operation.changeTrust({asset:i,limit:\"1\"}),a.Operation.setTrustLineFlags({asset:i,trustor:s,flags:{authorized:!0},source:r}),a.Operation.manageSellOffer({selling:i,buying:a.Asset.native(),amount:\"1\",price:\"0.0000001\",source:r}),a.Operation.manageBuyOffer({selling:a.Asset.native(),buying:i,buyAmount:\"1\",price:\"0.0000001\"}),a.Operation.setTrustLineFlags({asset:i,trustor:s,flags:{authorized:!1},source:r}),a.Operation.changeTrust({asset:c}),a.Operation.payment({asset:c,amount:\"0.0000001\",destination:s,source:o}));let d=new a.TransactionBuilder(e,{fee:new n.default(1).div(\"0.0000001\").div(t.length).toFixed(0,3),networkPassphrase:a.Networks[STELLAR_NETWORK]}).setTimeout(0);return t.forEach((e=>d.addOperation(e))),d=d.build(),d.toXDR()}))};\n",
    "fields": [
    {
    "name": "toAccount",
    "type": "string",
    "description": "Stellar address of the next SmartNFT02 owner. Only required during the active swap window. (before Christmas Day 2021 UTC)",
    "rule": "Must be a valid Stellar address"
    },
    {
    "name": "fromAccount",
    "type": "string",
    "description": "Stellar address of the current SmartNFT02 owner",
    "rule": "Must be a valid Stellar address"
    }
    ],
    "signer": "GBA4YHEVGCZR6DIX5F2CI4JJNN27RVYXNMMQ7C6HPMZ6I3VQXCNUR6KS"
    }